snippet if
    if(${1})
    {
        ${2}
    }
snippet if_macro
    #if ${1}
        ${2}
    #endif
snippet UNITY
    #if UNITY_EDITOR
        ${0}
    #endif
snippet IPHONE
    #if UNITY_IPHONE
        ${0}
    #endif
snippet ANDROID
    #if UNITY_ANDROID
        ${0}
    #endif
snippet awake
    void Awake()
    {
        ${1}
    }
snippet base_awake
    override protected void Awake()
    {
        base.Awake();
        ${1}
    }
snippet start
    void Start()
    {
        ${1}
    }
snippet base_start
    override protected void Start()
    {
        base.Start();
        ${1}
    }
snippet ondestroy
    private void OnDestroy()
    {
        ${1}
    }
snippet op
    override protected
snippet update
    void Update()
    {
        ${1}
    }
snippet key
    if (Input.GetKeyDown(KeyCode.A))
    {
    }
snippet find
    GameObject.Find("${1}")${2}
snippet gc
    .GetComponent<${1}>()
snippet adc
    AddComponent<${1}>()
snippet sar
    SetActiveRecursively(${1:true})
snippet ee
    [ExecuteInEditMode]
snippet log
    Debug.Log(${1});
snippet log_warn
    Debug.LogWarning(${1});
snippet log_err
    Debug.LogError(${1});
snippet log_c
    Console.WriteLine(${1});
snippet string
    string.Format("{0}", hoge)
snippet contain
    bool isContain = ${1:string}.Contains("${1:word}")
snippet contain_string_index
    bool isContain = str.IndexOf("hoge") >= 0;
snippet inst
    (${2:GameObject}) GameObject.Instantiate(${1:thing}, Vector3.zero, Quaternion.identity);
snippet go
    GameObject ${1:go} = new GameObject(${2:name});
snippet s2i
    Convert.ToInt32(${1:string})
snippet s2f
    float.Parse(${1:string}, CultureInfo.InvariantCulture.NumberFormat)
snippet load
    (${2:GameObject}) Resources.Load("${1:path}")
snippet wait
    yield return new WaitForSeconds(${1:time})
snippet sm
    SendMessage("${1:message}", ${2:null}, ${3:SendMessageOptions.DontRequireReceiver})
snippet forl
    foreach (${1:int} ${2:var} in ${3:list}) {
        ${4}
    }
snippet ford
    foreach (KeyValuePair<string, string> pair in ${3:dict})
    {
        ${4}
    }
snippet forenum
    foreach (${1:enum} value in Enum.GetValues(typeof(<|1|>)))
    {
        int intValue = (int)value;
        string strValue = value.ToString();
    }
snippet foreach_index
    foreach (var ${1} in ${2:list}.Select((Content, Index) => new { Content, Index }))
    {
        <|1|>.Content;
        <|1|>.Index;
    }
snippet foreach_range
    foreach(var i in Enumerable.Range(0,${1}))
    {
        ${2}
    }
snippet foreach_linq
    ${1}
    .ForEach(${2} => {
    });
snippet list
    List ${2:var} = new List();
snippet sort_list
    // 昇順
    ${1:list}.Sort((a, b) => a.${2:value} - b.<|2|>);
snippet dic
    Dictionary ${3:var} = new Dictionary();
snippet dic_init
    var dic = new Dictionary <string, string>()
    {
        { "", "" },
    };
snippet sort
    filtered.Sort(
        delegate(${1:int} a, $1 b) {
            return a.CompareTo(b);
        }
    );
snippet tryget
    ${1:int} ${2:value};
    if (${3:dict}.TryGetValue("${4:key}", out $2)) {
        ${5}
    }
snippet main
    using System;
    class A
    {
        static void Main(string[] args)
        {
            Console.WriteLine("hello");
        }
    }
snippet ismaster
    if (PhotonNetwork.isMasterClient) {
        ${1}
    }
snippet yield
    yield return new WaitForSeconds(${1});
snippet Coroutine
    IEnumerator ${1}() {
        yield return new WaitForSeconds(1.0f);
        yield return new WaitWhile (() => _isLoading);
        yield return StartCoroutine (DoHoge());
    }
snippet StartCoroutine
    StartCoroutine(${1});
snippet void
    private void ${1}()
    {
    }
snippet voidp
    public void ${1}()
    {
    }
snippet voids
    public static void ${1}()
    {
    }
snippet voidr
    protected void ${1}()
    {
    }
snippet bool
    private bool ${1}()
    {
    }
snippet init
    public void Init()
    {
    }
snippet bind
    private void Bind()
    {
    }
snippet Bind
    private void Bind()
    {
    }
snippet fori
    for (int i = 0; i < ${0:list}.Count; i++)
    {
    }
snippet fori_reverse
    for (int i = ${0:list}.Count - 1; i >= 0; i--)
    {
    }

snippet OnCollisionEnter
    void OnCollisionEnter(Collision col) {
        ${0:col.gameObject}
    }
snippet OnCollisionStay
    void OnCollisionStay(Collision col) {
        ${0:col.gameObject}
    }
snippet OnCollisionExit
    void OnCollisionExit(Collision col) {
        ${0:col.gameObject}
    }
snippet OnCollisionEnter2D
    void OnCollisionEnter2D(Collision2D col) {
        ${0:col.gameObject}
    }
snippet OnCollisionStay2D
    void OnCollisionStay2D(Collision2D col) {
        ${0:col.gameObject}
    }
snippet OnCollisionExit2D
    void OnCollisionExit2D(Collision2D col) {
        ${0:col.gameObject}
    }

snippet OnTriggerEnter
    void OnTriggerEnter(Collider col) {
        ${0:col.gameObject}
    }
snippet OnTriggerStay
    void OnTriggerStay(Collider col) {
        ${0:col.gameObject}
    }
snippet OnTriggerExit
    void OnTriggerExit(Collider col) {
        ${0:col.gameObject}
    }
snippet OnTriggerEnter2D
    void OnTriggerEnter2D(Collider2D col) {
        ${0:col.gameObject}
    }
snippet OnTriggerStay2D
    void OnTriggerStay2D(Collider2D col) {
        ${0:col.gameObject}
    }
snippet OnTriggerExit2D
    void OnTriggerExit2D(Collider2D col) {
        ${0:col.gameObject}
    }

snippet SerializeField
    [SerializeField]
snippet seri
    [SerializeField]
snippet serip
    [SerializeField]
    private ${1} ${2}
snippet event
    using UnityEngine.Events;
    [SerializeField]
    private UnityEvent AfterEvent = new UnityEvent();
snippet HideInInspector
    [HideInInspector]

snippet position_relative
    transform.position += new Vector3(0, ${1}, 0);
snippet rotation_absolute
    transform.rotation = Quaternion.Euler(0, {0}, 0);
snippet scale_absolute
    transform.localScale = new Vector3 (${1:value}, <|1|>, <|1|>);

snippet preprocessor_macro
    #if ${1}
    #elif
    #else
    #endif
snippet ios
    #if UNITY_IOS
    #endif
snippet android
    #if UNITY_ANDROID
    #endif
snippet unity
    #if UNITY_EDITOR
    #endif
snippet adhoc
    #if APP_STORE || ADHOC
    #endif

snippet glog
    GRAdvancedDebugLog.Log(${1});
snippet glog_err
    GRAdvancedDebugLog.LogError(${1});
snippet glog_db
    GRAdvancedDebugLog.DBLog(${1});
snippet ggetparam
    GM.I.GetParam("${1}");
snippet ggetword
    GM.I.GetWord("${1}");

snippet load_prefab
    Instantiate(Resources.Load ("Prefabs/${1}"));
snippet load_prefab_full
    Instantiate(Resources.Load("Prefabs/${1}"), new Vector3(0,0,0), Quaternion.identity) as GameObject;
snippet load_prefab_gr
    Instantiate(GRResourceCommon.LoadPrefab("Prefabs/Scene/${1}"));
snippet load_sprite_gr
    Instantiate(GRResourceCommon.LoadSprite("Prefabs/Scene/${1}"));
snippet load_scene
    using UnityEngine.SceneManagement; 
    SceneManager.LoadScene ("${1}");
snippet scene_name
    string sceneName = SceneManager.GetActiveScene ().name;
snippet load_scene_prefab_gr
    OGM.I.ChangeScenePrefab(GRSceneManager.MainScene.${1});
snippet load_scene_gr
    GRSceneManager.Instance.ChangeScene(GRSceneManager.MainScene.${1});
snippet load_scene_multi_gr
    GRSceneManager.Instance.ChangeMultiScene(GRSceneManager.MainScene.${1}, GM.I.GetParam("transition_speed"));

snippet linq
    using System.Linq;
snippet ui
    using UnityEngine.UI;
snippet spine
    using Spine;
    using Spine.Unity;
snippet unirx
    using UniRx;
snippet pro
    using TMPro;
snippet tween
    using DG.Tweening;
snippet prom
    [SerializeField]
    private TextMeshProUGUI Text;

snippet prop
    public ${1:type} ${0:var} { get; set; }

snippet prope
    [SerializeField]
    private ${1:type} _${2:value} = ${3};
    public <|1|> <|2|>
    {
        get { return _<|2|>; }
        set { _<|2|> = value; }
    }
snippet propn
    [SerializeField]
    private ${1:type} _${2:value};
    public <|1|> <|2|>
    {
        get { return _<|2|> != null ? _<|2|> : _<|2|> = GetComponent<<|1|>>(); }
    }
snippet member_serialize
    [SerializeField]
    private ${1:type} ${2:value};
snippet serim
    [SerializeField]
    private ${1:type} ${2:value};
snippet member
    private ${1:type} ${2:value};

snippet reactive
    ReactiveProperty <${1}>

snippet assert
    Debug.Assert(${1}, ${2});
snippet foreach_child
    foreach (Transform ${1} in GameObject.Find("${2}").transform)
    {
        ${3}
    }
snippet child_linq
    ${1}.GetComponentsInChildren <${2}>()
        .Any(_ => true);
snippet conditional
    [System.Diagnostics.Conditional("${1:UNITY_EDITOR}")]
snippet require
    [RequireComponent(typeof(${1}))]

snippet update_rx
    Observable
        .EveryUpdate()
        .Subscribe(_ => ${1})
        .AddTo(this);
snippet update_rx_distinctuntilchanged
        Observable.EveryUpdate()
        .Select(_ => ${1})
        .DistinctUntilChanged()
        .Subscribe(_ => {
            ${2}
        })
        .AddTo(this);
snippet Subscribe
    .Subscribe(_ => {
        ${1}
    })
    .AddTo(this);
snippet timer_interval_rx
    Observable.Interval(TimeSpan.FromSeconds(${1}))
    .Subscribe(_ => {
            ${1}
    }).AddTo(this);
snippet timer_once_rx
    Observable.Timer(TimeSpan.FromSeconds(${1}))
    .Subscribe(_ => {
            ${1}
    }).AddTo(this);
snippet timer_next_frame
    Observable.NextFrame()
        .Subscribe(_ => ${1});
snippet thread_main
    Observable.Create <int>(observer => { observer.OnNext(0); return null; })
    .ObserveOnMainThread()
    .Subscribe(_ => {
        ${1}
    });
snippet publish
    var stream = HOGE
                .Publish()
                .RefCount();
    stream
    .Subscribe(_ => )
    .AddTo(this);
snippet pair
    var pair = new Pair <int> (1, 2);
    pair.Previous = 3;
    pair.Current = 4;
snippet tween_move
    obj.transform.DOLocalMove(position, time)
    .OnComplete(() => {
    });
snippet tween_int
    DOTween.To(() => ${1:initialValue}, (n) => ${2:value} = n, ${3:finalValue}, ${4:duration});
    .OnComplete(() => ${5});

snippet color
    var color = new Color(.0f, .0f, .0f, .0f);
snippet readonly
    private readonly ${1} ${2}
snippet enum
    public enum ${1}
    {
        ${2}
    }
snippet enum_string
    public enum ${1}
    {
        ${2}
    }
    public static class <|1|>Ext
    {
        public static string ObtainType(this <|1|> value)
        {
            string[] values = { ""};
            return values[(int) value];
        }
    }
    <|1|>.Xxx.ObtainType()
snippet ac
    () => {
    };
snippet button
    ${1}.OnClickAsObservable()
    .Subscribe(_ => GRUtil.SafeCall(${2}))
    .AddTo(this);
snippet button_change_image
    buttonObject.GetComponent<Image> ().sprite = Resources.Load ("Textures/item5", typeof(Sprite)) as Sprite;
snippet safacall
    GRUtil.SafeCall(${1})
snippet subject
    public Subject <${1}> ${2}Subject = new Subject <<|1|>>();
snippet Random
    UnityEngine.Random.Range(0, ${1});
snippet rand_percent
        float percent = 50;
        float rand = UnityEngine.Random.Range(0, 100.0f);
        bool isLottery = rand <= percent;

snippet /return
    /// <returns>${0}</returns>

snippet www
    StartCoroutine(DownloadStart(url));
    IEnumerator DownloadStart(string Url)
    {
        Debug.Log("!!! start");
        WWW request = new WWW(Url);

        yield return request;

        if (!string.IsNullOrEmpty(request.error)) {
            Debug.Log("!!!" + request.error);
        } else {
            Debug.Log("!!! finish");
            // UTF8文字列として取得する
            string text = request.text;
            Debug.Log("!!! complete" + text);

            // バイナリデータとして取得する
            byte[] results = request.bytes;
        }
    }

snippet www_rx
    ObservableWWW.GetWWW(url, null, null)
    .Timeout(TimeSpan.FromSeconds(30))
    .Subscribe(receivedData => {
        Debug.Log("!!! Download finish!" + receivedData.text);
    }, err => {
        GRAdvancedDebugLog.LogError(err.ToString());
    })
    .AddTo(this);

snippet www_rx_post
    WWWForm form = new WWWForm();
    form.AddField("uid", UserId);

    ObservableWWW.Post(url, form, null)
    .Timeout(TimeSpan.FromSeconds(30))
    .Subscribe(receivedData => {
    }, err => {
        GRAdvancedDebugLog.LogError(err.ToString());
    }).AddTo(this);

snippet curl
    using System.Threading.Tasks;
    using System.Net.Http;

    string text = GetText().Result;

    private static async Task <string> GetText()
    {
        string result = await Task.Run(() =>
        {
            return new HttpClient().GetStringAsync("http://maps.google.com/maps/api/geocode/json?address=渋谷駅");
        });

        return result;
    }

snippet write
    using System.IO;
    var sw = new StreamWriter(@"ouch.log", true, System.Text.Encoding.GetEncoding("utf-8"));
    sw.Write("aaa\n");
    sw.Close();
snippet read
    using System.IO;
    using (var sr = new StreamReader(path))
    {
        string s = sr.ReadToEnd();
        Debug.Log("s:" + s);
    }

snippet menu_item
    [UnityEditor.MenuItem("Tools/${1}")]
    public static void <|1|>()
    {
    }

snippet application_openurl
    Application.OpenURL(${0});

snippet str_isnullorempty
    if (string.IsNullOrEmpty(${1:str}))
snippet find_index
    ${1:str}.IndexOf(${2:target});
snippet split
    ${1:str}.Split('${2:target char}');
snippet join
    string str = string.Join(",", array);
snippet substitute
    string result = str.Replace("a", "b");
snippet substitute
    string result = str.Replace("a", "b");

snippet object_to_int
    System.Convert.ToInt32(${1:object});
snippet object_to_float
    System.Convert.ToSingle(${1:object});
snippet bool_to_int
    Convert.ToInt32(${1:bool});
snippet bool_to_float
    Convert.ToSingle(${1:bool});
snippet int_to_bool
    System.Convert.ToBoolean(${1:int})
snippet int_to_float
    (float)${1:int}
snippet int_to_str
    ${1:int}.ToString();
snippet int_to_enum
    (${1:type})(${2:int})
snippet float_to_str
    ${1:float}.ToString("R");
snippet float_to_int
    (int)${1:float}f
snippet float_to_double
    System.Convert.ToDouble(${1:float})
snippet str_to_int
    int.Parse(${1:str});
snippet str_to_long
    long.Parse(${1:str});
snippet str_to_enum
    (${1:type}) Enum.Parse(typeof(<|1|>), ${2:str});
snippet str_to_float
    Convert.ToSingle(${1:str})
snippet str_to_json
    JsonNode json = JsonNode.Parse(text);
snippet str_to_json_Newtonsoft
    var   json     = (JObject) JsonConvert.DeserializeObject(text);
    var   location = json["results"][0]["geometry"]["location"];
    float lat      = Convert.ToSingle(location["lat"].ToString());
snippet str_to_stringreader
        string result = "";
        string text   = "hoge";
        var rs = new System.IO.StringReader(text);
        while (rs.Peek() > -1)
        {
            result += rs.ReadLine();
            result += "\n";
        }
        return result;
snippet str_to_dic
    Dictionary<string, object> dic = MiniJSON.Json.Deserialize(${1:json}) as Dictionary<string, object>;
snippet enum_to_int
    (int)${1:enum};
snippet enum_to_str
    ${1:type}.GetName(typeof(<|1|>), ${2:value});
snippet enum_to_list
    Enum.GetValues(typeof(${1:type})).OfType <<|1|>>().ToList();
snippet screen_to_world
    Camera.main.ScreenToWorldPoint(${1:position});
snippet world_to_screen
    Camera.main.WorldToScreenPoint(${1:position});
snippet dic_to_str
    string json = MiniJSON.Json.Serialize(${1:dic});
snippet dic_to_key_array
    var keysArray = dic.Keys.ToArray();
snippet dic_to_key_list
    var keysList = dic.Keys.ToList();
snippet dic_to_value_array
    var valsArray = dic.Values.ToArray();
snippet dic_to_value_list
    var valsList = dic.Values.ToList();

snippet byte_to_str
    string str = System.Text.Encoding.UTF8.GetString(${1:byte_array});
snippet json_get_value
    string bgm = JsonNodeRoot["stage"]["0"]["bgm"].Get<string>();
snippet json_get_array
    foreach (var ranking in JsonNodeApps["ranking"])
    {
        int rank = (int) (ranking["rank"].Get <long>());
    }

snippet create_json_str
    using MiniJSON;
    var ${1:dic} = new Dictionary<string, object>()
    {
        { "hoge", "hoge" },
    };
    string json = Json.Serialize(<|1|>);
snippet create_json_str_raw
    string jsonStr = "{ \"id\": 100, \"name\": \"テストアイテム\", \"description\": \"説明だよ\" }";
snippet create_json_list
    var ${1:dic} = new Dictionary<string, object>()
    {
        { "hoge", "hoge" },
    };
    string json = MiniJSON.Json.Serialize(<|1|>);

snippet system
    Process.Start("pwd");

snippet bash
    using System.Diagnostics;
    public static string Bash(string cmd)
    {
        var escapedArgs = cmd.Replace("\"", "\\\"");

        var process = new Process()
        {
            StartInfo = new ProcessStartInfo
            {
                FileName               = "/bin/bash",
                Arguments              = $"-c \"{escapedArgs}\"",
                RedirectStandardOutput = true,
                UseShellExecute        = false,
                CreateNoWindow         = true,
            }
        };
        process.Start();
        string result = process.StandardOutput.ReadToEnd();
        process.WaitForExit();

        return result;
    }

snippet play_bgm
    GRAudioManager.Instance.PlayBGM(ResourcesData.${1});
snippet play_se
    GRAudioManager.Instance.PlayOneShotSE(ResourcesData.${1});
snippet popup
    var popup = Instantiate(GRResourceCommon.LoadPrefab(Popup.${1}.ObtainPath())).GetComponent <${2}>();
snippet popup_common
    var    popup = Instantiate(GRResourceCommon.LoadPrefab(Popup.Common.ObtainPath())).GetComponent <PopupCommon>();
    string title = GM.I.GetWord("");
    string desc  = GM.I.GetWord("");
    popup.Init(title, desc, false);
snippet touch
    Observable
    .EveryUpdate()
    .Where(_ => TouchManager.GetPhase() == TouchManager.ControlPhase.Ended)
    .First()
    .Subscribe(_ => {
    })
    .AddTo(this);

snippet x_button_event
    private void ButtonEvent(object sender, System.EventArgs e)
    {
        System.Diagnostics.Debug.WriteLine("Button Clicked");
    }
snippet x_log
    System.Diagnostics.Debug.WriteLine("Button Clicked");
