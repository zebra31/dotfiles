snippet if
    if(${1})
    {
        ${2}
    }
snippet start
    void Start() {
        ${1}
    }
snippet update
    void Update() {
        ${1}
    }
snippet find
    GameObject.Find("${1}")${2}
snippet gc
    ${1}.transform.GetComponent<${2}>();
snippet ac
    AddComponent()
snippet sar
    SetActiveRecursively(${1:true})
snippet rc
    [RequireComponent (typeof(${1:AudioSource}))]
snippet ee
    [ExecuteInEditMode]
snippet log
    Debug.Log(${0});
snippet log_warn
    Debug.LogWarning(${0});
snippet log_err
    Debug.LogError(${0});
snippet inst
    (${2:GameObject}) GameObject.Instantiate(${1:thing}, Vector3.zero, Quaternion.identity);
snippet go
    GameObject ${1:go} = new GameObject(${2:name});
snippet s2i
    Convert.ToInt32(${1:string})
snippet s2f
    float.Parse(${1:string}, CultureInfo.InvariantCulture.NumberFormat)
snippet load
    (${2:GameObject}) Resources.Load("${1:path}")
snippet wait
    yield return new WaitForSeconds(${1:time})
snippet sm
    SendMessage("${1:message}", ${2:null}, ${3:SendMessageOptions.DontRequireReceiver})
snippet forl
    foreach (${1:int} ${2:var} in ${3:list}) {
        ${4}
    }
snippet ford
    foreach (KeyValuePair pair in ${3:dict}) {
        ${4}
    }
snippet list
    List ${2:var} = new List();
snippet dict
    Dictionary ${3:var} = new Dictionary();
snippet sort
    filtered.Sort(
        delegate(${1:int} a, $1 b) {
            return a.CompareTo(b);
        }
    );
snippet tryget
    ${1:int} ${2:value};
    if (${3:dict}.TryGetValue("${4:key}", out $2)) {
        ${5}
    }
snippet main
    using System;
    class ${0}
    {
        static void Main()
        {
            Console.WriteLine("Hello World!");
        }
    }
snippet SerializeField
    [SerializeField]
snippet ismaster
    if (PhotonNetwork.isMasterClient) {
        ${1}
    }
snippet yield
    yield return new WaitForSeconds(${1});
snippet IEnumerator
    IEnumerator ${1}() {
        yield return new WaitForSeconds(${2});
    }
snippet StartCoroutine
    StartCoroutine(${0});
snippet void
    private void ${0}() {
    }
snippet fori
    for (int i = 0; i < ${0:list}.Count; i++) {
    }

snippet OnCollisionEnter
    void OnCollisionEnter(Collision col) {
        ${0:col.gameObject}
    }
snippet OnCollisionStay
    void OnCollisionStay(Collision col) {
        ${0:col.gameObject}
    }
snippet OnCollisionExit
    void OnCollisionExit(Collision col) {
        ${0:col.gameObject}
    }
snippet OnCollisionEnter2D
    void OnCollisionEnter2D(Collision2D col) {
        ${0:col.gameObject}
    }
snippet OnCollisionStay2D
    void OnCollisionStay2D(Collision2D col) {
        ${0:col.gameObject}
    }
snippet OnCollisionExit2D
    void OnCollisionExit2D(Collision2D col) {
        ${0:col.gameObject}
    }

snippet OnTriggerEnter
    void OnTriggerEnter(Collider col) {
        ${0:col.gameObject}
    }
snippet OnTriggerStay
    void OnTriggerStay(Collider col) {
        ${0:col.gameObject}
    }
snippet OnTriggerExit
    void OnTriggerExit(Collider col) {
        ${0:col.gameObject}
    }
snippet OnTriggerEnter2D
    void OnTriggerEnter2D(Collider2D col) {
        ${0:col.gameObject}
    }
snippet OnTriggerStay2D
    void OnTriggerStay2D(Collider2D col) {
        ${0:col.gameObject}
    }
snippet OnTriggerExit2D
    void OnTriggerExit2D(Collider2D col) {
        ${0:col.gameObject}
    }

snippet position_relative
    transform.position += new Vector3(0, 1${0}, 0);
snippet scale
    transform.localScale = new Vector3 (${1:value}, <|1|>, <|1|>);

snippet applicationLoadLevel
    Application.LoadLevel("${0}");
snippet preprocessor_macro
    #if ${0}
    #else
    #endif

snippet glog
    GRAdvancedDebugLog.Log (${0});
snippet glog_err
    GRAdvancedDebugLog.LogError (${0});
snippet glog_db
    GRAdvancedDebugLog.DBLog (${0});
snippet Instantiate
    Instantiate(Resources.Load ("Prefabs/${0}"));
snippet Instantiate_full
    Instantiate(Resources.Load("Prefabs/${0}"), new Vector3(0,0,0), Quaternion.identity) as GameObject;

snippet ui
    using UnityEngine.UI;
snippet spine
    using Spine;
    using Spine.Unity;
