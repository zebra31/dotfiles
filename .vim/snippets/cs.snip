snippet if
    if(${1})
    {
        ${2}
    }
snippet if_macro
    #if ${1}
        ${2}
    #endif
snippet awake
    void Awake()
    {
        ${1}
    }
snippet start
    void Start()
    {
        ${1}
    }
snippet update
    void Update()
    {
        ${1}
    }
snippet find
    GameObject.Find("${1}")${2}
snippet gc
    ${1}.transform.GetComponent<${2}>();
snippet ac
    AddComponent()
snippet sar
    SetActiveRecursively(${1:true})
snippet rc
    [RequireComponent (typeof(${1:AudioSource}))]
snippet ee
    [ExecuteInEditMode]
snippet log
    Debug.Log(${1});
snippet log_warn
    Debug.LogWarning(${1});
snippet log_err
    Debug.LogError(${1});
snippet inst
    (${2:GameObject}) GameObject.Instantiate(${1:thing}, Vector3.zero, Quaternion.identity);
snippet go
    GameObject ${1:go} = new GameObject(${2:name});
snippet s2i
    Convert.ToInt32(${1:string})
snippet s2f
    float.Parse(${1:string}, CultureInfo.InvariantCulture.NumberFormat)
snippet load
    (${2:GameObject}) Resources.Load("${1:path}")
snippet wait
    yield return new WaitForSeconds(${1:time})
snippet sm
    SendMessage("${1:message}", ${2:null}, ${3:SendMessageOptions.DontRequireReceiver})
snippet forl
    foreach (${1:int} ${2:var} in ${3:list}) {
        ${4}
    }
snippet ford
    foreach (KeyValuePair pair in ${3:dict}) {
        ${4}
    }
snippet foreach_index
    foreach (var ${1} in ${2:list}.Select((Content, Index) => new { Content, Index }))
    {
        <|1|>.Content;
        <|1|>.Index;
    }
snippet foreach_range
    foreach(var i in Enumerable.Range(0,${1}))
    {
        ${2}
    }
snippet list
    List ${2:var} = new List();
snippet dict
    Dictionary ${3:var} = new Dictionary();
snippet sort
    filtered.Sort(
        delegate(${1:int} a, $1 b) {
            return a.CompareTo(b);
        }
    );
snippet tryget
    ${1:int} ${2:value};
    if (${3:dict}.TryGetValue("${4:key}", out $2)) {
        ${5}
    }
snippet main
    using System;
    class ${1}
    {
        static void Main()
        {
            Console.WriteLine("Hello World!");
        }
    }
snippet ismaster
    if (PhotonNetwork.isMasterClient) {
        ${1}
    }
snippet yield
    yield return new WaitForSeconds(${1});
snippet IEnumerator
    IEnumerator ${1}() {
        yield return new WaitForSeconds(${2});
    }
snippet StartCoroutine
    StartCoroutine(${1});
snippet void
    private void ${1}()
    {
    }
snippet voidp
    public void ${1}()
    {
    }
snippet init
    public void Init()
    {
    }
snippet fori
    for (int i = 0; i < ${0:list}.Count; i++) {
    }

snippet OnCollisionEnter
    void OnCollisionEnter(Collision col) {
        ${0:col.gameObject}
    }
snippet OnCollisionStay
    void OnCollisionStay(Collision col) {
        ${0:col.gameObject}
    }
snippet OnCollisionExit
    void OnCollisionExit(Collision col) {
        ${0:col.gameObject}
    }
snippet OnCollisionEnter2D
    void OnCollisionEnter2D(Collision2D col) {
        ${0:col.gameObject}
    }
snippet OnCollisionStay2D
    void OnCollisionStay2D(Collision2D col) {
        ${0:col.gameObject}
    }
snippet OnCollisionExit2D
    void OnCollisionExit2D(Collision2D col) {
        ${0:col.gameObject}
    }

snippet OnTriggerEnter
    void OnTriggerEnter(Collider col) {
        ${0:col.gameObject}
    }
snippet OnTriggerStay
    void OnTriggerStay(Collider col) {
        ${0:col.gameObject}
    }
snippet OnTriggerExit
    void OnTriggerExit(Collider col) {
        ${0:col.gameObject}
    }
snippet OnTriggerEnter2D
    void OnTriggerEnter2D(Collider2D col) {
        ${0:col.gameObject}
    }
snippet OnTriggerStay2D
    void OnTriggerStay2D(Collider2D col) {
        ${0:col.gameObject}
    }
snippet OnTriggerExit2D
    void OnTriggerExit2D(Collider2D col) {
        ${0:col.gameObject}
    }

snippet SerializeField
    [SerializeField]
snippet HideInInspector
    [HideInInspector]

snippet position_relative
    transform.position += new Vector3(0, ${1}, 0);
snippet rotation_absolute
    transform.rotation = Quaternion.Euler(0, {0}, 0);
snippet scale_absolute
    transform.localScale = new Vector3 (${1:value}, <|1|>, <|1|>);

snippet load_scene
    using UnityEngine.SceneManagement; 
    SceneManager.LoadScene ("${1}");
snippet scene_name
    string sceneName = SceneManager.GetActiveScene ().name;

snippet preprocessor_macro
    #if ${1}
    #else
    #endif

snippet glog
    GRAdvancedDebugLog.Log(${1});
snippet glog_err
    GRAdvancedDebugLog.LogError(${1});
snippet glog_db
    GRAdvancedDebugLog.DBLog(${1});
snippet ggetparam
    GM.I.GetParam("${1}");
snippet ggetword
    GM.I.GetWord("${1}");

snippet Instantiate
    Instantiate(Resources.Load ("Prefabs/${1}"));
snippet Instantiate_full
    Instantiate(Resources.Load("Prefabs/${1}"), new Vector3(0,0,0), Quaternion.identity) as GameObject;
snippet load_prefab
    Instantiate(GRResourceCommon.LoadPrefab("Prefabs/Scene/${1}"));
snippet load_sprite
    Instantiate(GRResourceCommon.LoadSprite("Prefabs/Scene/${1}"));

snippet linq
    using System.Linq;
snippet ui
    using UnityEngine.UI;
snippet spine
    using Spine;
    using Spine.Unity;
snippet unirx
    using UniRx;

snippet prop
    public ${1:type} ${0:var} { get; set; }

snippet prope
    [SerializeField]
    private ${1:type} _${2:value};
    public <|1|> <|2|>
    {
        get { return _<|2|>; }
        set { _<|2|> = value; }
    }
snippet serialize_member
    [SerializeField]
    private ${1:type} ${2:value};

snippet assert
    Debug.Assert(${1}, ${2});
snippet foreach_child
    foreach (Transform ${1} in GameObject.Find("${2}").transform)
    {
        ${3}
    }
snippet conditional
    [System.Diagnostics.Conditional("${1:DEBUG}")]
snippet update_rx
    var update = Observable
                    .EveryUpdate()
                    .Subscribe(_ => ${1})
                    .AddTo(this);
snippet timer_rx
    Observable.Interval(TimeSpan.FromSeconds(1000)).Subscribe(_ => {
            ${1}
    }).AddTo(this);
snippet color
    var color = new Color(.0f, .0f, .0f, .0f);
snippet readonly
    private readonly ${1} ${2}
snippet enum_string
    public enum ${1}
    {
        ${2}
    }
    public static class <|1|>Ext
    {
        public static string ObtainType(this <|1|> value)
        {
            string[] values = { ""};
            return values[(int) value];
        }
    }
    <|1|>.Xxx.ObtainType()
snippet action
    (() => );
snippet button
    ${1}.OnClickAsObservable()
    .Subscribe(_ => GRUtil.SafeCall(${2}))
    .AddTo(this);
snippet safacall
    GRUtil.SafeCall(${1})
snippet subject
    public Subject <${1}> ${2}Subject = new Subject <<|1|>>();
snippet Random
    UnityEngine.Random.Range(0, ${1});

snippet /return
    /// <returns>${0}</returns>
