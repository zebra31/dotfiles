# Shougo: ---------------------------

[[plugins]]
repo = 'Shougo/vimshell.vim'
hook_add = '''
let g:vimshell_split_command =
      \ get(g:, 'vimshell_split_command', '')
'''

[[plugins]]
repo = 'Shougo/neosnippet'
on_i = 1
hook_add = '''
" <C-k>でsnippetの展開
let g:neosnippet#snippets_directory='~/.vim/snippets/'
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
'''

# include周りの補完, c, c++は必須
[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_i = 1
filetypes = ['c', 'cpp', 'm', 'mm']
hook_add = '''
let g:neoinclude#_paths = '/Applications/Cocos/Cocos2d-x/cocos2d-x-3.6/cocos'
let g:neoinclude#_paths = '/usr/local/Cellar/boost'
'''


# Base Tools: ---------------------------

# 非同期コンパイル(OmniSharpを自動で起動もしてくれる)
[[plugins]]
repo = 'tpope/vim-dispatch'
on_i = 1

[[plugins]]
repo = 'honza/vim-snippets'
on_i = 1

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = 'source ~/.vim/rc/plugins/quickrun.rc.vim'

# syntax check with quickrun and save
[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
on_event = ['BufWrite']
hook_add = 'source ~/.vim/rc/plugins/watchdogs.rc.vim'
hook_post_source = '''
call watchdogs#setup(g:quickrun_config)
'''
# syntax error color (jceb fork, gradeup column)
[[plugins]]
repo = 'cohama/vim-hier'
on_source = 'vim-watchdogs'

# show watchdogs error on command window
[[plugins]]
repo = 'dannyob/quickfixstatus'
on_source = 'vim-watchdogs'

# Add mark and jump error
[[plugins]]
repo = 'KazuakiM/vim-qfsigns'
on_source = 'vim-watchdogs'
hook_add = '''
" let g:qfsigns#AutoJump = 1
let g:qfsigns#Config = {'id': '5051', 'name': 'QFRare',}
sign define QFRare texthl=SpellBad text=>>
'''

[[plugins]]
repo = 'KazuakiM/vim-qfstatusline'
on_source = 'vim-watchdogs'

[[plugins]]
repo = 'vim-scripts/gtags.vim'
on_i = 1
hook_add = 'source ~/.vim/rc/plugins/gtags.rc.vim'

# 英単語辞書補完(重いのでoff)
# [[plugins]]
# repo = 'ujihisa/neco-look'
# on_i = 1
# filetypes  =  ['*']

# c, cpp complement
# [[plugins]]
# repo = 'justmao945/vim-clang'
# on_i = 1
# filetypes  =  ['c', 'cpp']

# cs complement
# 自動でserverセットアップしてくれる(してくれない場合手動: plugin下のserverへ行き, xbuild)
[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
on_i = 1
filetypes  =  ['cs', 'csi', 'csx']
windows = 'msbuild server/OmniSharp.sln'
mac     = 'xbuild server/OmniSharp.sln'
unix    = 'xbuild server/OmniSharp.sln'
hook_add = '''
inoremap <expr> <CR>    pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" ポップアップ削除
inoremap <expr><C-h> neocomplcache#smart_close_popup().”\<C-h>”
'''

# make plugin(:LayoutPlugin xxx.vim)
[[plugins]]
repo = 'mopp/layoutplugin.vim'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = {n = '<Plug>'}
hook_add = 'source ~/.vim/rc/plugins/anzu.rc.vim'

# TODO: 使いたい
# [[plugins]]
# repo = 'hewes/unite-gtags'

# Convenience Tools: ---------------------------

[[plugins]]
repo = 'yuratomo/w3m.vim'
hook_add = '''
let g:w3m#external_browser = 'google-chrome'
nnoremap <Leader>B :W3mTab google<CR>
'''

# default key is 'gs'
[[plugins]]
repo = 'AndrewRadev/switch.vim'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = ['<Plug>(openbrowser-smart-search)']
hook_add = '''
let g:netrw_nogx = 1
nmap <Leader>o <Plug>(openbrowser-smart-search)
vmap <Leader>o <Plug>(openbrowser-smart-search)
'''

# TODO: can not use python3
# [[plugins]]
# repo = 'sjl/gundo.vim'
# hook_add = 'nnoremap U :<C-u>GundoToggle<CR>'

# Need 'brew install cmigemo' (gvim限定)
[[plugins]]
repo = 'haya14busa/vim-migemo'

[[plugins]]
repo = 'kana/vim-altr'
hook_add = 'nmap <Leader>a <Plug>(altr-forward)'
on_map = '<Plug>(altr-'

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = 'source ~/.vim/rc/plugins/calendar.rc.vim'

# file shaping(:Align =)
[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'vim-scripts/TaskList.vim'
hook_add = '''
nnoremap <Leader>T :TaskList<CR>
'''

# Need to `brew install ctags`
[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
let g:tagbar_width = 30
nnoremap <Leader>t :TagbarToggle<CR>
'''

# C++ ---------------------------


# Markdown ---------------------------

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = 'md'

# preview
[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'md'
hook_add = '''
let g:previm_open_cmd = 'open -a Safari'
autocmd FileType markdown nnoremap <Leader>r :PrevimOpen<CR>
'''

# Swift ---------------------------

# filetypes = ['m', 'mm', 'swift', 'cpp', 'h', 'hpp']
[[plugins]]
repo = 'zebult/vim-zxcode.vim'
hook_add = 'source ~/.vim/rc/plugins/zxcode.rc.vim'

# Xcode化
# [[plugins]]
# repo = 'msanders/cocoa.vim'
# on_i = 1
# filetypes = ['m', 'swift', 'cpp', 'h', 'hpp']

# iOSシミュレータ使える??
# [[plugins]]
# repo = 'kballard/vim-swift'
# on_i = 1
# on_ft = ['m', 'swift', 'cpp', 'h', 'hpp']

# brew install sourcekitten
# [[plugins]]
# repo = 'mitsuse/autocomplete-swift'
# on_i = 1
# on_ft = 'swift'
# hook_add = 'autocmd FileType swift imap <buffer> <C-k> <Plug>(autocomplete_swift_jump_to_placeholder)' not use snip


# Go ---------------------------

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'


# Html ---------------------------

[[plugins]]
repo = 'mattn/emmet-vim'

# Game ---------------------------
# [[plugins]]
# repo = 'rbtnn/game_engine.vim'
#
# [[plugins]]
# repo = 'rbtnn/puyo.vim'
#
# [[plugins]]
# repo = 'rbtnn/mario.vim'
#
# [[plugins]]
# repo = 'rbtnn/reversi.vim'
