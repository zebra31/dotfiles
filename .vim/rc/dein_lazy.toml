# Shougo: ---------------------------
[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = "has('lua')"
on_event = 'InsertEnter'
hook_source = 'source ~/.vim/rc/plugins/neocomplete.rc.vim'

[[plugins]]
repo = 'Shougo/vimshell.vim'

[[plugins]]
repo = 'Shougo/neosnippet'
on_i = 1
hook_add = '''
    " <C-k>でsnippetの展開
    let g:neosnippet#snippets_directory='~/.vim/snippets/'
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim']

[[plugins]]
# include周りの補完, c, c++は必須
repo = 'Shougo/neoinclude.vim'
on_i = 1
filetypes = ['c', 'cpp']

# Base Tools: ---------------------------
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# 非同期コンパイル(OmniSharpを自動で起動もしてくれる)
[[plugins]]
repo = 'tpope/vim-dispatch'
on_i = 1

[[plugins]]
repo = 'honza/vim-snippets'
on_i = 1

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Plug>'
hook_source = 'source ~/.vim/rc/plugins/quickrun.rc.vim'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
on_source = 'vim-quickrun.vim'
on_event = ['FocusLost', 'CursorHold']
hook_add = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config['watchdogs_checker/_'] = {'outputter/quickfix/open_cmd': ''}
  let g:quickrun_config['watchdogs_checker/jshint'] = {'cmdopt': '--config `/.jshintrc'}
  " ファイルの保存時にチェックを行う
  let g:watchdogs_check_BufWritePost_enable = 1
'''
hook_post_source = '''
  call watchdogs#setup(g:quickrun_config)
'''

[[plugins]]
repo = 'cohama/vim-hier'
on_source = 'vim-quickrun.vim'

# Need to `brew install ctags`
[[plugins]]
repo = 'soramugi/auto-ctags.vim'
on_i = 1
commands = 'TagbarToggle'
hook_add = '''
    let g:tagbar_width = 20
    nmap <Leader>T :TagbarToggle<CR>
'''

[[plugins]]
repo = 'vim-scripts/gtags.vim'
on_i = 1
hook_add = '''
    " Grep 準備
    nnoremap <C-g> :Gtags -g
    " このファイルの関数一覧
    nnoremap <C-m> :Gtags -f %<CR><CR>
    " カーソル以下の定義元を探す
    "nnoremap <C-j> :Gtags <C-r><C-w><CR><CR>
    map <C-j> :GtagsCursor<CR><CR>
    " カーソル以下の使用箇所を探す
    nnoremap <C-k> :Gtags -r <C-r><C-w><CR><CR>
    " 次の検索結果
    nnoremap <C-n> :cn<CR>
    " 前の検索結果
    nnoremap <C-p> :cp<CR>
'''

# 構文チェック
[[plugins]]
repo = 'scrooloose/sYntastic.git'
on_i = 1

[[plugins]]
repo = 'ujihisa/neco-look'
on_i = 1
filetypes  =  ['*']

# c, cpp complement
[[plugins]]
repo = 'justmao945/vim-clang'
on_i = 1
filetypes  =  ['c', 'cpp']

# cs complement
[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
on_i = 1
filetypes  =  ['cs', 'csi', 'csx']
# 自動でserverセットアップしてくれる(してくれない場合手動: plugin下のserverへ行き, xbuild)
windows = 'msbuild server/OmniSharp.sln'
mac     = 'xbuild server/OmniSharp.sln'
unix    = 'xbuild server/OmniSharp.sln'
hook_add = '''
    inoremap <expr> <CR>    pumvisible() ? "\<C-y>" : "\<CR>"
    inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
    " ポップアップ削除
    inoremap <expr><C-h> neocomplcache#smart_close_popup().”\<C-h>”
'''

# [[plugins]]
# repo = 'hewes/unite-gtags'

# make plugin(:LayoutPlugin xxx.vim)
[[plugins]]
repo = 'mopp/layoutplugin.vim'

# Convenience Tools: ---------------------------
[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = 'nnoremap sw :Switch<CR>'

# >> can
# [[plugins]]
# repo = 'kana/vim-submode'
# hook_source = 'source ~/.vim/rc/plugins/submode.rc.vim'

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_map = '<C-_>'

# markdown preview
# [[plugins]]
# repo = 'kannokanno/previm' # TODO: 使えない(dein.rc.vimで書いてる)
# on_map = '<Space>'
# on_ft = 'md'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = ['<Plug>(openbrowser-smart-search)']
hook_add = '''
    let g:netrw_nogx = 1
    nmap go <Plug>(openbrowser-smart-search)
    vmap go <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'haya14busa/vim-easymotion'
hook_source = 'source ~/.vim/rc/plugins/vim-easymotion.rc.vim'
on_map = '<Plug>(easymotion-'

[[plugins]]
repo = 'sjl/gundo.vim'
hook_add = 'nmap U :<C-u>GundoToggle<CR>'

[[plugins]]
repo = 'thinca/vim-visualstar'

# Need 'brew install cmigemo' (gvim限定)
[[plugins]]
repo = 'haya14busa/vim-migemo'

[[plugins]]
repo = 'kana/vim-altr'
hook_add = 'nmap <Leader>a <Plug>(altr-forward)'
on_map = '<Plug>(altr-'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = '''
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1
'''

# No lazy but use lazy
[[plugins]]
repo = 'kana/vim-smartchr'
on_i = 1
hook_source = 'source ~/.vim/rc/plugins/smartchr.rc.vim'

[[plugins]]
repo = 't9md/vim-quickhl'
on_map = '<Space>'
hook_add = '''
    nmap <Space>m <Plug>(quickhl-manual-this)
    xmap <Space>m <Plug>(quickhl-manual-this)
    nmap <Space>M <Plug>(quickhl-manual-reset)
    xmap <Space>M <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'tpope/vim-surround'
on_map = 'S'

# [[plugins]]
# repo = 'tyru/operator-camelize.vim' # // TODO: 使えない(dein.rc.vimで書いてる)
# on_source = ['vim-operator-user.vim']
# hook_add = '''
#     " map <Leader>C <plug>(operator-camelize-toggle)
#     " map C <plug>(operator-camelize-toggle)
# '''

# file shaping(:Align =)
[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'vim-scripts/TaskList.vim'
hook_add = '''
    nnoremap <Leader>T :TaskList<CR>
'''

# Swift ---------------------------
# [[plugins]]
# Xcode化
# repo = 'msanders/cocoa.vim'
# on_i = 1
# filetypes = ['m', 'swift', 'cpp', 'h', 'hpp']

# brew install sourcekitten
[[plugins]]
repo = 'mitsuse/autocomplete-swift'
on_i = 1
on_ft = 'swift'
# hook_source = 'autocmd FileType swift imap <buffer> <C-k> <Plug>(autocomplete_swift_jump_to_placeholder)' not use snip

# iOSシミュレータ使える??
[[plugins]]
repo = 'kballard/vim-swift'
# on_i = 1
# on_ft = ['m', 'swift', 'cpp', 'h', 'hpp']

# Go ---------------------------
[[plugins]]
repo = 'fatih/vim-go'

# Html ---------------------------
[[plugins]]
repo = 'mattn/emmet-vim'

