# Shougo: ---------------------------

[[plugins]]
repo = 'Shougo/denite.nvim'
if = "has('nvim')"
on_cmd = 'Denite'
hook_post_source = '''
" use ag
call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nogroup', '-g', ''])
" call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm'])
" call denite#custom#source('file_rec', 'sorters', ['sorter_rank'])
call denite#custom#source('file_rec', 'sorters', ['sorter_sublime'])
" call denite#custom#source('file_rec', 'sorters', ['sorter_selecta'])
" call denite#custom#source('file_mru', 'converters', ['converter_relative_word'])

" カーソルキー, cn, cpで移動
call denite#custom#map('insert' , '<Down>' , '<denite:move_to_next_line>')
call denite#custom#map('insert' , '<Up>'   , '<denite:move_to_previous_line>')
call denite#custom#map('insert' , '<C-n>'  , '<denite:move_to_next_line>')
call denite#custom#map('insert' , '<C-p>'  , '<denite:move_to_previous_line>')

" ignore
call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ [ '.git/', '.ropeproject/', '__pycache__/',
      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/', '*.meta'])

'''
hook_add = 'source ~/.vim/rc/plugins/denite.rc.vim'

# vimfier need
[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = 'Unite'
hook_post_source = 'source ~/.vim/rc/plugins/unite.rc.vim'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = 'source ~/.vim/rc/plugins/vimfiler.rc.vim'
on_map = '<Leader>f'

# [[plugins]]
# repo = 'cocopon/vaffle.vim'

[[plugins]]
repo = 'Shougo/vimshell.vim'
on_map = '<Leader>v'
hook_add = '''
let g:vimshell_split_command =
      \ get(g:, 'vimshell_split_command', '')
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
if = "has('nvim')"
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet'
on_i = 1
hook_add = '''
" <C-k>でsnippetの展開
let g:neosnippet#snippets_directory='~/.vim/snippets/'
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
'''

# include周りの補完, c, c++は必須
[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_i = 1
filetypes = ['c', 'cpp', 'm', 'mm']
hook_add = '''
let g:neoinclude#_paths = '/Applications/Cocos/Cocos2d-x/cocos2d-x-3.6/cocos'
let g:neoinclude#_paths = '/usr/local/Cellar/boost'
'''

# Base Tools: ---------------------------

# 非同期コンパイル(OmniSharpを自動で起動もしてくれる)
[[plugins]]
repo = 'tpope/vim-dispatch'
on_i = 1

[[plugins]]
repo = 'honza/vim-snippets'
on_i = 1

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = 'source ~/.vim/rc/plugins/quickrun.rc.vim'

# syntax check with quickrun and save
[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
on_event = ['BufWrite']
hook_post_source = '''
call watchdogs#setup(g:quickrun_config)
'''
hook_add = 'source ~/.vim/rc/plugins/watchdogs.rc.vim'

# syntax error color (jceb fork, gradeup column)
[[plugins]]
repo = 'cohama/vim-hier'
on_source = 'vim-watchdogs'

# show watchdogs error on command window
[[plugins]]
repo = 'dannyob/quickfixstatus'
on_source = 'vim-watchdogs'

# Add mark and jump error
[[plugins]]
repo = 'KazuakiM/vim-qfsigns'
on_source = 'vim-watchdogs'
hook_add = '''
" let g:qfsigns#AutoJump = 1
let g:qfsigns#Config = {'id': '5051', 'name': 'QFRare',}
sign define QFRare texthl=SpellBad text=>>
'''

[[plugins]]
repo = 'KazuakiM/vim-qfstatusline'
on_source = 'vim-watchdogs'

[[plugins]]
repo = 'vim-scripts/gtags.vim'
on_ft = ['cpp', 'h', 'hpp']
hook_add = 'source ~/.vim/rc/plugins/gtags.rc.vim'

# 英単語辞書補完(重いのでoff)
# [[plugins]]
# repo = 'ujihisa/neco-look'
# on_i = 1
# filetypes  =  ['*']

# c, cpp complement
# [[plugins]]
# repo = 'justmao945/vim-clang'
# on_i = 1
# filetypes  =  ['c', 'cpp']

# cs complement
# 自動でserverセットアップしてくれる(mono起動する)(してくれない場合手動: plugin下のserverへ行き, xbuild)
# path/OmniSharp/omnisharp-vim/server$ xbuild # xbuildはmonoに同包されているコマンド
[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
filetypes  =  ['cs', 'csi', 'csx']
windows = 'msbuild server/OmniSharp.sln'
mac     = 'xbuild server/OmniSharp.sln'
unix    = 'xbuild server/OmniSharp.sln'
hook_add = '''
inoremap <expr> <CR>    pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" ポップアップ削除
" inoremap <expr><C-h> neocomplcache#smart_close_popup().”\<C-h>”
'''

# make plugin(:LayoutPlugin xxx.vim)
# [[plugins]]
# repo = 'mopp/layoutplugin.vim'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = {n = '<Plug>'}
hook_add = 'source ~/.vim/rc/plugins/anzu.rc.vim'

# Convenience Tools: ---------------------------

[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = 'source ~/.vim/rc/plugins/CamelCaseMotion.rc.vim'
on_i = 1

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_event = 'BufRead'
hook_post_source = '''
call tcomment#DefineType('objc', '// %s')
'''
hook_add = '''
let g:tcommentMapLeader1 = '<F12>'
let g:tcommentMapLeaderOp1 = 'gc'
let g:tcommentMapLeaderOp2 = 'gC'
'''

# Need to `brew install global`
[[plugins]]
repo = 'zebult/auto-gtags.vim'
hook_add = 'source ~/.vim/rc/plugins/auto-gtags.rc.vim'

# Need to `brew install ctags`
[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = 'source ~/.vim/rc/plugins/auto-ctags.rc.vim'
on_map = '<C-[>'

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = {n = '<Plug>'}
hook_add = 'source ~/.vim/rc/plugins/easymotion.rc.vim'

[[plugins]]
repo = 'mrtazz/simplenote.vim'
hook_add = 'source ~/Dropbox/Saichi/Vim/Private/simplenote.rc.vim'

# メタ文字含むとlightline壊れるので注意
[[plugins]]
repo = 'zebult/toggl.vim'
hook_add = 'source ~/Dropbox/Saichi/Vim/Private/toggl.rc.vim'

[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'

# macvim日本語打てなくなる
[[plugins]]
repo = 'cohama/lexima.vim'
if = "!has('gui_running')"
hook_post_source = 'source ~/.vim/rc/plugins/lexima.rc.vim'
on_i = 1

[[plugins]]
repo = 'tyru/eskk.vim'
on_i = 1
on_map = '<Plug>(eskk:toggle)'
hook_post_source = '''
function! s:eskk_use_camma_period()
  let table = eskk#table#new('rom_to_hira*', 'rom_to_hira')
  call table.add_map(',', '，')
  call table.add_map('.', '．')
  call table.add_map('=', '＝')
  call table.add_map('~', '～')
  call eskk#register_mode_table('hira', table)

  let table = eskk#table#new('rom_to_kata*', 'rom_to_kata')
  call table.add_map(',', '，')
  call table.add_map('.', '．')
  call table.add_map('=', '＝')
  call table.add_map('~', '～')
  call eskk#register_mode_table('kata', table)
endfunction
call s:eskk_use_camma_period()
'''
hook_add = 'source ~/.vim/rc/plugins/eskk.rc.vim'

[[plugins]]
repo = 'thinca/vim-ref'
on_i = 1
hook_add = 'source ~/.vim/rc/plugins/ref.rc.vim'

[[plugins]]
repo = 'yuratomo/w3m.vim'
hook_add = '''
let g:w3m#external_browser = 'google-chrome'
nnoremap <Leader>B :W3mTab google<CR>
'''
on_map = '<Leader>B'

# TODO: can not use python3
# [[plugins]]
# repo = 'sjl/gundo.vim'
# hook_add = 'nnoremap U :<C-u>GundoToggle<CR>'

# Need 'brew install cmigemo' (gvim限定)
# [[plugins]]
# repo = 'haya14busa/vim-migemo'
# on_i = 1

[[plugins]]
repo = 'kana/vim-altr'
hook_add = 'nmap <Leader>a <Plug>(altr-forward)'
on_map = '<Plug>(altr-'

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = 'source ~/.vim/rc/plugins/calendar.rc.vim'
on_map = '<Leader>c'

# file shaping(:Align =)
[[plugins]]
repo = 'vim-scripts/Align'
hook_add = '''
let g:loaded_AlignMapsPlugin = 0
'''
on_i = 1

# TODO 一覧
# [[plugins]]
# repo = 'vim-scripts/TaskList.vim'
# hook_add = '''
# nnoremap <Leader>T :TaskList<CR>
# '''
# on_map = '<Leader>T'

# Need to `brew install ctags`
[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = 'source ~/.vim/rc/plugins/tagbar.rc.vim'

[[plugins]]
repo = 'rizzatti/dash.vim'
hook_add = 'source ~/.vim/rc/plugins/dash.rc.vim'
on_map = '<Plug>(Dash'

# C++ ---------------------------

# # ouch objc
# [[plugins]]
# repo = 'zchee/deoplete-clang'
# hook_add = '''
# '''
# on_ft = ['c', 'cpp', 'cmake']
# if = "has('nvim')"
# depends = ['deoplete.nvim']

# [[plugins]]
# repo = 'tweekmonster/deoplete-clang2'
# depends = ['deoplete.nvim']
# on_ft = ['c', 'cpp', 'cmake', 'mm', 'm']

# Markdown ---------------------------

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = 'md'

# preview
[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'md'
hook_add = '''
let g:previm_open_cmd = 'open -a Safari'
autocmd FileType markdown nnoremap <Leader>r :PrevimOpen<CR>
'''

# Swift ---------------------------

[[plugins]]
repo = 'zebult/vim-zxcode'
filetypes = ['m', 'mm', 'swift', 'cpp', 'h', 'hpp']
hook_add = 'source ~/.vim/rc/plugins/zxcode.rc.vim'

[[plugins]]
repo = 'tokorom/xcode-actions.vim'
filetypes = ['m', 'mm', 'swift', 'cpp', 'h', 'hpp']
hook_add = 'source ~/.vim/rc/plugins/xcode-actions.rc.vim'

# Xcode化
# [[plugins]]
# repo = 'msanders/cocoa.vim'
# filetypes = ['mm', 'm', 'swift', 'cpp', 'h', 'hpp']

# iOSシミュレータ使える??
# [[plugins]]
# repo = 'kballard/vim-swift'
# on_i = 1
# on_ft = ['m', 'swift', 'cpp', 'h', 'hpp']

# brew install sourcekitten
# [[plugins]]
# repo = 'mitsuse/autocomplete-swift'
# on_i = 1
# on_ft = 'swift'
# hook_add = 'autocmd FileType swift imap <buffer> <C-k> <Plug>(autocomplete_swift_jump_to_placeholder)' not use snip

# Go ---------------------------

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
on_i = 1


# Html ---------------------------

[[plugins]]
repo = 'mattn/emmet-vim'
filetypes = ['html']
on_i = 1

# Game ---------------------------
# [[plugins]]
# repo = 'rbtnn/game_engine.vim'
#
# [[plugins]]
# repo = 'rbtnn/puyo.vim'
#
# [[plugins]]
# repo = 'rbtnn/mario.vim'
#
# [[plugins]]
# repo = 'rbtnn/reversi.vim'
