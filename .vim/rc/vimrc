" zebult vimrc

if &compatible
  set nocompatible
endif

" rcË™≠„ÅøËæº„Åø TODO: Èñ¢Êï∞„ÅÆÂÜÖÂÆπÁêÜËß£„Åô„Çã
function! s:source_rc(path, ...) abort "{{{
  let use_global = get(a:000, 0, !has('vim_starting'))
  let abspath = resolve(expand('~/.vim/rc/' . a:path))
  if !use_global
    execute 'source' fnameescape(abspath)
    return
  endif

  " substitute all 'set' to 'setglobal'
  let content = map(readfile(abspath),
        \ 'substitute(v:val, "^\\W*\\zsset\\ze\\W", "setglobal", "")')
  " create tempfile and source the tempfile
  let tempfile = tempname()
  try
    call writefile(content, tempfile)
    execute printf('source %s', fnameescape(tempfile))
  finally
    if filereadable(tempfile)
      call delete(tempfile)
    endif
  endtry
endfunction"}}}

if has('vim_starting')
  call s:source_rc('init.rc.vim')
endif

call s:source_rc('filetype.rc.vim')
call s:source_rc('dein.rc.vim')
call s:source_rc('mappings.rc.vim')
call s:source_rc('view.rc.vim')
call s:source_rc('skeleton.rc.vim')
autocmd BufNewFile *.cs norm 3j2wi%3dh 

""""""""""""""""""""""""""""""
" grep„ÇíQuickFix„ÅßÈñã„Åè
""""""""""""""""""""""""""""""
augroup grepopen
    " autocmd!
    " autocmd QuickfixCmdPost vimprep cw
    autocmd QuickFixCmdPost *grep* cwindow
augroup END
"""""""""""""""""""""""""""""

function! g:Open_xcode(...) abort
    let a:count = get(a:, 1)
    " file open
    if filereadable(a:count)
        call system('open -a Xcode '.expand('%:p'))
        echo "xcode file open."
        return
    endif
    " nest limit
    if a:count == 10
        echo "Not git project."
        return
    endif
    " find git
    let s:search_path = "**/.git"
    for i in range(a:count)
        let s:search_path = "../" . s:search_path
    endfor
    let s:git_path = expand(s:search_path)
    if s:git_path == ""
        call g:Open_xcode(a:count + 1)
        return
    endif
    " find xcode project
    let s:search_path = "**/*.xcworkspace"
    for i in range(a:count)
        let s:search_path = "../" . s:search_path
    endfor
    let s:files = expand(s:search_path)
    if s:files == ""
        echo "Not xcode project."
    else
        echo "xcode project open."
        call system('open -a Xcode '.expand(s:files))
    endif
endfunction

" Open Xcode(dot is file only)
command! -nargs=* XcodeProjectOpen call g:Open_xcode(<f-args>)
command! XcodeFileOpen execute ":call g:Open_xcode(expand('%:p'))"
" Close Xcode
command! -nargs=0 XcodeClose call system("osascript -e 'tell application \"Xcode\" to quit'")
" Focus Xcode
command! -nargs=0 XcodeFocus call system("osascript -e 'tell application \"Xcode\" to activate'")

nnoremap <silent> <Leader>X :XcodeProjectOpen<CR>
nnoremap <silent> <Leader>x :XcodeFileOpen<CR>
nnoremap <silent> <Leader>Q :XcodeClose<CR>
nnoremap <silent> <Leader>e :XcodeFocus<CR>
