#!/bin/bash
PROGNAME=$(basename $0)
VERSION="1.0"
IS_BACKUP=true
IMG_EXTENSIONS=("png" "jpeg")
IMG_QUALITY=160

usage() {
    echo "Usage: $PROGNAME [OPTIONS] FILE"
    echo "  This script is image fix tool."
    echo
    echo "Options:"
    echo "  -h, --help"
    echo "      --version"
    echo "  -r, --resize width [file]"
    echo "  -m, --merge [file]"
    echo
    exit 1
}

is_img() {
    for ext in ${IMG_EXTENSIONS[@]}; do
        if [ $ext == $1 ]; then
            return 1
            exit
        fi
    done
    return 0
}

for OPT in "$@"
do
    case "$OPT" in
        '-h'|'--help' )
            usage
            exit 1
            ;;
        '--version' )
            echo $VERSION
            exit 1
            ;;
        '-r'|'--resize' )
            # img -r {width} [file file ...]
            if [ -z "$3" ]; then
                echo 'ERROR: not enough arg'
                exit
            fi
            width=$2
            shift
            # echo $IS_BACKUP
            for i in `seq 1 ${#}`
            do
                shift
                if [ -z "$1" ]; then
                    break
                fi
                extension=`echo $1 | cut -d"." -f2`
                is_img $extension
                is_img_flag=$?
                if [ $is_img_flag == '0' ]; then
                    continue
                fi
                if [ ${IS_BACKUP} == true ]; then
                    file_name=`echo $1 | cut -d"." -f1`
                    extension=`echo $1 | cut -d"." -f2`
                    imageName=$file_name\_r\.$extension
                elif [ ${IS_BACKUP} == false ]; then
                    imageName=$1
                fi
                convert -filter box -resize $width $1 $imageName
                if [ $? -gt 0 ]; then
                    echo 'error'
                    exit 1
                fi
                echo 'success >>' $imageName
            done
            exit 1
            ;;
        '-m'|'--merge' )
            # img -m file file ...
            imageCount=0
            for i in `seq 1 ${#}`
            do
                shift
                imageNames=$imageNames' '${1}
                imageCount=`expr $imageCount + 1`
            done
            percentage=`expr $IMG_QUALITY / $imageCount`
            convert -geometry $percentage% +append $imageNames out_m.png
            if [ $? -gt 0 ]; then
                echo 'error'
                exit 1
            fi
            echo "success >> out_m.png"
            exit 1
            ;;
        '-f'|'--forceoverwrite' )
            IS_BACKUP=false
            shift
            ;;
        '--'|'-' )
            shift 1
            param+=( "$@" )
            break
            ;;
        -*)
            echo "$PROGNAME: illegal option -- '$(echo $1 | sed 's/^-*//')'" 1>&2
            exit 1
            ;;
        *)
            if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
                #param=( ${param[@]} "$1" )
                param+=( "$1" )
                shift 1
            fi
            ;;
    esac
done

if [ -z $param ]; then
    echo "$PROGNAME: too few arguments" 1>&2
    echo "Try '$PROGNAME --help' for more information." 1>&2
    exit 1
fi

# echo "Want you backup?[y/n]"
# read backup_flag
# if [ ${backup_flag} == "y" ]; then
# elif [ ${backup_flag} == "n" ]; then
